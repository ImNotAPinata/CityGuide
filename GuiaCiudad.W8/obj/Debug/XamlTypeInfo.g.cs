//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace GuiaCiudad.W8
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.String fullName)
        {
            if(_provider == null)
            {
                _provider = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            string standardName;
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            if(_xamlTypeToStandardName.TryGetValue(type, out standardName))
            {
                xamlType = GetXamlTypeByName(standardName);
            }
            else
            {
                xamlType = GetXamlTypeByName(type.FullName);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (global::System.String.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypes.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            xamlType = CreateXamlType(typeName);
            if (xamlType != null)
            {
                _xamlTypes.Add(typeName, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (global::System.String.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType> _xamlTypes = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();
        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember> _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();
        global::System.Collections.Generic.Dictionary<global::System.Type, string> _xamlTypeToStandardName = new global::System.Collections.Generic.Dictionary<global::System.Type, string>();

        private void AddToMapOfTypeToStandardName(global::System.Type t, global::System.String str)
        {
            if(!_xamlTypeToStandardName.ContainsKey(t))
            {
                _xamlTypeToStandardName.Add(t, str);
            }
        }

        private object Activate_0_GuiaViewModel() { return new global::GuiaCiudad.W8.viewModels.GuiaViewModel(); }

        private object Activate_1_ViewModelBase() { return new global::GuiaCiudad.W8.viewModels.ViewModelBase(); }

        private object Activate_2_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Foto>(); }

        private object Activate_3_Collection() { return new global::System.Collections.ObjectModel.Collection<global::GuiaCiudad.Common.Foto>(); }

        private object Activate_4_Foto() { return new global::GuiaCiudad.Common.Foto(); }

        private object Activate_5_ObservableCollection() { return new global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Noticia>(); }

        private object Activate_6_Collection() { return new global::System.Collections.ObjectModel.Collection<global::GuiaCiudad.Common.Noticia>(); }

        private object Activate_7_Noticia() { return new global::GuiaCiudad.Common.Noticia(); }

        private object Activate_8_Ciudad() { return new global::GuiaCiudad.Common.Ciudad(); }

        private object Activate_9_Clima() { return new global::GuiaCiudad.Common.Clima(); }

        private object Activate_11_MainPage() { return new global::GuiaCiudad.W8.MainPage(); }

        private void VectorAdd_2_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GuiaCiudad.Common.Foto>)instance;
            var newItem = (global::GuiaCiudad.Common.Foto)item;
            collection.Add(newItem);
        }

        private void VectorAdd_3_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GuiaCiudad.Common.Foto>)instance;
            var newItem = (global::GuiaCiudad.Common.Foto)item;
            collection.Add(newItem);
        }

        private void VectorAdd_5_ObservableCollection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GuiaCiudad.Common.Noticia>)instance;
            var newItem = (global::GuiaCiudad.Common.Noticia)item;
            collection.Add(newItem);
        }

        private void VectorAdd_6_Collection(object instance, object item)
        {
            var collection = (global::System.Collections.Generic.ICollection<global::GuiaCiudad.Common.Noticia>)instance;
            var newItem = (global::GuiaCiudad.Common.Noticia)item;
            collection.Add(newItem);
        }


        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(string typeName)
        {
            global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType userType;

            switch (typeName)
            {
            case "Object":
                xamlType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.Object));
                break;

            case "String":
                xamlType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::System.String));
                break;

            case "Windows.UI.Xaml.Controls.Page":
                xamlType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.Page));
                break;

            case "Windows.UI.Xaml.Controls.UserControl":
                xamlType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlSystemBaseType(typeName, typeof(global::Windows.UI.Xaml.Controls.UserControl));
                break;

            case "GuiaCiudad.W8.viewModels.GuiaViewModel":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GuiaCiudad.W8.viewModels.GuiaViewModel), GetXamlTypeByName("GuiaCiudad.W8.viewModels.ViewModelBase"));
                userType.Activator = Activate_0_GuiaViewModel;
                userType.AddMemberName("FotoList");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Foto>),
                                                   "System.Collections.ObjectModel.ObservableCollection<GuiaCiudad.Common.Foto>");
                userType.AddMemberName("NoticiaList");
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Noticia>),
                                                   "System.Collections.ObjectModel.ObservableCollection<GuiaCiudad.Common.Noticia>");
                userType.AddMemberName("Ciudad");
                userType.AddMemberName("Clima");
                userType.AddMemberName("GetGuiaCommand");
                xamlType = userType;
                break;

            case "GuiaCiudad.W8.viewModels.ViewModelBase":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GuiaCiudad.W8.viewModels.ViewModelBase), GetXamlTypeByName("Object"));
                userType.Activator = Activate_1_ViewModelBase;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<GuiaCiudad.Common.Foto>":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Foto>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<GuiaCiudad.Common.Foto>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Foto>),
                                                   "System.Collections.ObjectModel.ObservableCollection<GuiaCiudad.Common.Foto>");
                userType.Activator = Activate_2_ObservableCollection;
                userType.CollectionAdd = VectorAdd_2_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<GuiaCiudad.Common.Foto>":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::GuiaCiudad.Common.Foto>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::GuiaCiudad.Common.Foto>),
                                                   "System.Collections.ObjectModel.Collection<GuiaCiudad.Common.Foto>");
                userType.Activator = Activate_3_Collection;
                userType.CollectionAdd = VectorAdd_3_Collection;
                xamlType = userType;
                break;

            case "GuiaCiudad.Common.Foto":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GuiaCiudad.Common.Foto), GetXamlTypeByName("Object"));
                userType.Activator = Activate_4_Foto;
                userType.AddMemberName("id");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("width");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("height");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("imagen_url");
                AddToMapOfTypeToStandardName(typeof(global::System.Object),
                                                   "Object");
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.ObservableCollection<GuiaCiudad.Common.Noticia>":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Noticia>), GetXamlTypeByName("System.Collections.ObjectModel.Collection<GuiaCiudad.Common.Noticia>"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Noticia>),
                                                   "System.Collections.ObjectModel.ObservableCollection<GuiaCiudad.Common.Noticia>");
                userType.Activator = Activate_5_ObservableCollection;
                userType.CollectionAdd = VectorAdd_5_ObservableCollection;
                xamlType = userType;
                break;

            case "System.Collections.ObjectModel.Collection<GuiaCiudad.Common.Noticia>":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::System.Collections.ObjectModel.Collection<global::GuiaCiudad.Common.Noticia>), GetXamlTypeByName("Object"));
                AddToMapOfTypeToStandardName(typeof(global::System.Collections.ObjectModel.Collection<global::GuiaCiudad.Common.Noticia>),
                                                   "System.Collections.ObjectModel.Collection<GuiaCiudad.Common.Noticia>");
                userType.Activator = Activate_6_Collection;
                userType.CollectionAdd = VectorAdd_6_Collection;
                xamlType = userType;
                break;

            case "GuiaCiudad.Common.Noticia":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GuiaCiudad.Common.Noticia), GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_Noticia;
                userType.AddMemberName("titulo");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("cuerpo");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("fuente");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                userType.AddMemberName("link");
                AddToMapOfTypeToStandardName(typeof(global::System.String),
                                                   "String");
                xamlType = userType;
                break;

            case "GuiaCiudad.Common.Ciudad":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GuiaCiudad.Common.Ciudad), GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_Ciudad;
                xamlType = userType;
                break;

            case "GuiaCiudad.Common.Clima":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GuiaCiudad.Common.Clima), GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_Clima;
                xamlType = userType;
                break;

            case "GuiaCiudad.W8.viewModels.ActionCommand":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GuiaCiudad.W8.viewModels.ActionCommand), GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case "GuiaCiudad.W8.MainPage":
                userType = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType(this, typeName, typeof(global::GuiaCiudad.W8.MainPage), GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                userType.Activator = Activate_11_MainPage;
                xamlType = userType;
                break;

            }
            return xamlType;
        }


        private object get_0_GuiaViewModel_FotoList(object instance)
        {
            var that = (global::GuiaCiudad.W8.viewModels.GuiaViewModel)instance;
            return that.FotoList;
        }
        private void set_0_GuiaViewModel_FotoList(object instance, object Value)
        {
            var that = (global::GuiaCiudad.W8.viewModels.GuiaViewModel)instance;
            that.FotoList = (global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Foto>)Value;
        }
        private object get_1_Foto_id(object instance)
        {
            var that = (global::GuiaCiudad.Common.Foto)instance;
            return that.id;
        }
        private void set_1_Foto_id(object instance, object Value)
        {
            var that = (global::GuiaCiudad.Common.Foto)instance;
            that.id = (global::System.String)Value;
        }
        private object get_2_Foto_width(object instance)
        {
            var that = (global::GuiaCiudad.Common.Foto)instance;
            return that.width;
        }
        private void set_2_Foto_width(object instance, object Value)
        {
            var that = (global::GuiaCiudad.Common.Foto)instance;
            that.width = (global::System.String)Value;
        }
        private object get_3_Foto_height(object instance)
        {
            var that = (global::GuiaCiudad.Common.Foto)instance;
            return that.height;
        }
        private void set_3_Foto_height(object instance, object Value)
        {
            var that = (global::GuiaCiudad.Common.Foto)instance;
            that.height = (global::System.String)Value;
        }
        private object get_4_Foto_imagen_url(object instance)
        {
            var that = (global::GuiaCiudad.Common.Foto)instance;
            return that.imagen_url;
        }
        private void set_4_Foto_imagen_url(object instance, object Value)
        {
            var that = (global::GuiaCiudad.Common.Foto)instance;
            that.imagen_url = (global::System.Object)Value;
        }
        private object get_5_GuiaViewModel_NoticiaList(object instance)
        {
            var that = (global::GuiaCiudad.W8.viewModels.GuiaViewModel)instance;
            return that.NoticiaList;
        }
        private void set_5_GuiaViewModel_NoticiaList(object instance, object Value)
        {
            var that = (global::GuiaCiudad.W8.viewModels.GuiaViewModel)instance;
            that.NoticiaList = (global::System.Collections.ObjectModel.ObservableCollection<global::GuiaCiudad.Common.Noticia>)Value;
        }
        private object get_6_Noticia_titulo(object instance)
        {
            var that = (global::GuiaCiudad.Common.Noticia)instance;
            return that.titulo;
        }
        private void set_6_Noticia_titulo(object instance, object Value)
        {
            var that = (global::GuiaCiudad.Common.Noticia)instance;
            that.titulo = (global::System.String)Value;
        }
        private object get_7_Noticia_cuerpo(object instance)
        {
            var that = (global::GuiaCiudad.Common.Noticia)instance;
            return that.cuerpo;
        }
        private void set_7_Noticia_cuerpo(object instance, object Value)
        {
            var that = (global::GuiaCiudad.Common.Noticia)instance;
            that.cuerpo = (global::System.String)Value;
        }
        private object get_8_Noticia_fuente(object instance)
        {
            var that = (global::GuiaCiudad.Common.Noticia)instance;
            return that.fuente;
        }
        private void set_8_Noticia_fuente(object instance, object Value)
        {
            var that = (global::GuiaCiudad.Common.Noticia)instance;
            that.fuente = (global::System.String)Value;
        }
        private object get_9_Noticia_link(object instance)
        {
            var that = (global::GuiaCiudad.Common.Noticia)instance;
            return that.link;
        }
        private void set_9_Noticia_link(object instance, object Value)
        {
            var that = (global::GuiaCiudad.Common.Noticia)instance;
            that.link = (global::System.String)Value;
        }
        private object get_10_GuiaViewModel_Ciudad(object instance)
        {
            var that = (global::GuiaCiudad.W8.viewModels.GuiaViewModel)instance;
            return that.Ciudad;
        }
        private void set_10_GuiaViewModel_Ciudad(object instance, object Value)
        {
            var that = (global::GuiaCiudad.W8.viewModels.GuiaViewModel)instance;
            that.Ciudad = (global::GuiaCiudad.Common.Ciudad)Value;
        }
        private object get_11_GuiaViewModel_Clima(object instance)
        {
            var that = (global::GuiaCiudad.W8.viewModels.GuiaViewModel)instance;
            return that.Clima;
        }
        private void set_11_GuiaViewModel_Clima(object instance, object Value)
        {
            var that = (global::GuiaCiudad.W8.viewModels.GuiaViewModel)instance;
            that.Clima = (global::GuiaCiudad.Common.Clima)Value;
        }
        private object get_12_GuiaViewModel_GetGuiaCommand(object instance)
        {
            var that = (global::GuiaCiudad.W8.viewModels.GuiaViewModel)instance;
            return that.GetGuiaCommand;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember xamlMember = null;
            global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "GuiaCiudad.W8.viewModels.GuiaViewModel.FotoList":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.W8.viewModels.GuiaViewModel");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "FotoList", "System.Collections.ObjectModel.ObservableCollection<GuiaCiudad.Common.Foto>");
                xamlMember.Getter = get_0_GuiaViewModel_FotoList;
                xamlMember.Setter = set_0_GuiaViewModel_FotoList;
                break;
            case "GuiaCiudad.Common.Foto.id":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.Common.Foto");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "id", "String");
                xamlMember.Getter = get_1_Foto_id;
                xamlMember.Setter = set_1_Foto_id;
                break;
            case "GuiaCiudad.Common.Foto.width":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.Common.Foto");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "width", "String");
                xamlMember.Getter = get_2_Foto_width;
                xamlMember.Setter = set_2_Foto_width;
                break;
            case "GuiaCiudad.Common.Foto.height":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.Common.Foto");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "height", "String");
                xamlMember.Getter = get_3_Foto_height;
                xamlMember.Setter = set_3_Foto_height;
                break;
            case "GuiaCiudad.Common.Foto.imagen_url":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.Common.Foto");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "imagen_url", "Object");
                xamlMember.Getter = get_4_Foto_imagen_url;
                xamlMember.Setter = set_4_Foto_imagen_url;
                break;
            case "GuiaCiudad.W8.viewModels.GuiaViewModel.NoticiaList":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.W8.viewModels.GuiaViewModel");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "NoticiaList", "System.Collections.ObjectModel.ObservableCollection<GuiaCiudad.Common.Noticia>");
                xamlMember.Getter = get_5_GuiaViewModel_NoticiaList;
                xamlMember.Setter = set_5_GuiaViewModel_NoticiaList;
                break;
            case "GuiaCiudad.Common.Noticia.titulo":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.Common.Noticia");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "titulo", "String");
                xamlMember.Getter = get_6_Noticia_titulo;
                xamlMember.Setter = set_6_Noticia_titulo;
                break;
            case "GuiaCiudad.Common.Noticia.cuerpo":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.Common.Noticia");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "cuerpo", "String");
                xamlMember.Getter = get_7_Noticia_cuerpo;
                xamlMember.Setter = set_7_Noticia_cuerpo;
                break;
            case "GuiaCiudad.Common.Noticia.fuente":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.Common.Noticia");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "fuente", "String");
                xamlMember.Getter = get_8_Noticia_fuente;
                xamlMember.Setter = set_8_Noticia_fuente;
                break;
            case "GuiaCiudad.Common.Noticia.link":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.Common.Noticia");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "link", "String");
                xamlMember.Getter = get_9_Noticia_link;
                xamlMember.Setter = set_9_Noticia_link;
                break;
            case "GuiaCiudad.W8.viewModels.GuiaViewModel.Ciudad":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.W8.viewModels.GuiaViewModel");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "Ciudad", "GuiaCiudad.Common.Ciudad");
                xamlMember.Getter = get_10_GuiaViewModel_Ciudad;
                xamlMember.Setter = set_10_GuiaViewModel_Ciudad;
                break;
            case "GuiaCiudad.W8.viewModels.GuiaViewModel.Clima":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.W8.viewModels.GuiaViewModel");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "Clima", "GuiaCiudad.Common.Clima");
                xamlMember.Getter = get_11_GuiaViewModel_Clima;
                xamlMember.Setter = set_11_GuiaViewModel_Clima;
                break;
            case "GuiaCiudad.W8.viewModels.GuiaViewModel.GetGuiaCommand":
                userType = (global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlUserType)GetXamlTypeByName("GuiaCiudad.W8.viewModels.GuiaViewModel");
                xamlMember = new global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlMember(this, "GetGuiaCommand", "GuiaCiudad.W8.viewModels.ActionCommand");
                xamlMember.Getter = get_12_GuiaViewModel_GetGuiaCommand;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }

    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(global::System.String input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlSystemBaseType
    {
        global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public global::System.Object CreateFromString(global::System.String input)
        {
            if (_enumValues != null)
            {
                global::System.Int32 value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    global::System.Int32 enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( global::System.String.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::GuiaCiudad.W8.GuiaCiudad_W8_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(global::System.String targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


